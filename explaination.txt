server folder structure
server/
  |- src/
      |- models/
      |- routes/
      |- controllers/
      |- middleware/
      |- scritps/
  |- app.js
  |- package.json

src/: This directory contains the core application code.
models/: Define your MongoDB schema and models in this directory.
routes/: Define your Express.js routes in this directory.
controllers/: Implement the logic for your routes in this directory.
middleware/: Store your custom middleware functions here.
utility/ : Contains common "helper" functions that might be used throughout the app
scripts/ : Contains scripts that can be executed standalone (e.g. database reset etc...)

app.js: This file is the entry point of your application. It sets up the Express.js server and connects it to the database.

package.json: The package file that lists the dependencies for your project.



------
summary:
-Developed and deployed a Software as a Service (SaaS) project tracker application built using the MongoDB, Express,  React, Node.jS (MERN Stack)
-Utilised Postman to test APIs; Increase testing efficiency through scripting in Postman
-Some point about complicated database stuff and designs
-Enabled cryptocurrency and fiat payments through Stripe API and Smart Contract to enable users to subscribe to premium tiers
-Split resources up through authorization and designed permissions to ensure certain resources .... using custom middlewares....
-Implemented OAuth2.0 and googleapis... integrate seamlessly within database.... give user option to oauth or password.... google login....
-Enhanced security through 2FA implementaion using google authenticator and encryption of password.....
-React router used to authenticate routes etc...
-Material UI for styling....
-Allowed for a subscription based models via integration of Stripe and through listening to webhook events

---
Note when to use 403 and 401?
401: use when user is just not authorized to do so (e.g. accessing someone else project = 401, unauthorized)
403: use when user is forbidden to do so (e.g. accessing a locked project = 403, forbidden because no one can do it)
---
put and delete request for axios might follow a different format from get requests. For example, i was told i was unauthorized for put and delete axios, when in fact, it was just that the format is just  abit different from get. 
For example, put request MUST have a body. If there is no body, put in null
For delete request, if you have data, which usually isnt the case, cannot use the standard axios call, need do:
const res = await axios.delete(
                      `${apiUrl}/projects/${projectId}/sharing`,
                      {
                        headers: headers,
                        data: {
                          email: [emailToDelete],
                        },
                      },
                    )